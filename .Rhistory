ntree = 1000)
library(caret)
train.control <- caret::trainControl(method = "cv", number = 10) # Cross-validation com k=10
## Random Forest / dados imputados
set.seed(23)
modeloRF1 <- train(diabetes~.,
train,
method = "rf",
metric = "Accuracy",
tuneGrid = tuneGrid,
trControl = train.control,
importance = TRUE,
ntree = 1000)
library(caret)
train.control <- caret::trainControl(method = "cv", number = 10) # Cross-validation com k=10
## Random Forest / dados imputados
set.seed(23)
modeloRF1 <- train(diabetes~.,
train,
method = "rf",
metric = "Accuracy",
tuneGrid = tuneGrid,
trControl = train.control,
importance = TRUE,
ntree = 1000)
library(caret)
train.control <- caret::trainControl(method = "cv", number = 10) # Cross-validation com k=10
## Random Forest / dados imputados
set.seed(23)
modeloRF1 <- train(diabetes~.,
train,
method = "rf",
metric = "Accuracy",
tuneGrid = tuneGrid,
trControl = train.control,
importance = TRUE,
ntree = 1000)
library(caret)
train.control <- caret::trainControl(method = "cv", number = 10) # Cross-validation com k=10
## Random Forest / dados imputados
set.seed(23)
tuneGrid <- expand.grid(.mtry = c(1: 10))
modeloRF1 <- train(diabetes~.,
train,
method = "rf",
metric = "Accuracy",
tuneGrid = tuneGrid,
trControl = train.control,
importance = TRUE,
ntree = 1000)
print(modeloRF1)
rocRF1 <- roc(response = train$diabetes, predictor = predict(modeloRF1, train, type = "prob")[,2])
plotaroc(rocRF1)
## Random Forest / sem missing
set.seed(23)
tuneGrid <- expand.grid(.mtry = c(1: 10))
modeloRF2 <- train(diabetes~.,
train_without_NAs,
method = "rf",
metric = "Accuracy",
tuneGrid = tuneGrid,
trControl = train.control,
importance = TRUE,
ntree = 1000)
print(modeloRF2)
rocRF2 <- roc(response = train_without_NAs$diabetes, predictor = predict(modeloRF1, train_without_NAs, type = "prob")[,2])
plotaroc(rocRF2)
tree_num <- which(modeloRF1$finalModel$forest$ndbigtree == min(modeloRF1$finalModel$forest$ndbigtree))
print(paste("Menor árvore com imputação",tree_num))
tree_func(final_model = modeloRF1$finalModel, tree_num[1])
tree_num <- which(modeloRF2$finalModel$forest$ndbigtree == min(modeloRF2$finalModel$forest$ndbigtree))
print(paste("Menor árvore sem imputação:",tree_num))
tree_func(final_model = modeloRF2$finalModel, tree_num[1])
## Random Forest com dados imputados
rocRF1 <- roc(response = test$diabetes, predictor = predict(modeloRF1, test, type = "prob")[,2])
plotaroc(rocRF1, titulo = "Curva ROC Random Forest (Imputados)")
predictRF1 <- predict(modeloRF1, newdata = test)
print("Dados imputados:")
confusionMatrix(predictRF1, test$diabetes)
## Random Forest com dados imputados
rocRF2 <- roc(response = test_without_NAs$diabetes, predictor = predict(modeloRF2, test_without_NAs, type = "prob")[,2])
plotaroc(rocRF2, titulo = "Curva ROC Random Forest (sem Missing)")
predictRF2 <- predict(modeloRF2, newdata = test_without_NAs)
print("Sem Missing:")
confusionMatrix(predictRF2, test_without_NAs$diabetes)
## dados imputados
set.seed(23)
modeloSVM1 <- e1071::tune.svm(diabetes ~.,
data   = train,
kernel = 'linear',
cost   = c(0.001, 0.01, 0.1, 1, 5, 10))
print(modeloSVM1)
rocSMV1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob")[,2])
## dados imputados
set.seed(23)
modeloSVM1 <- e1071::tune.svm(diabetes ~.,
data   = train,
kernel = 'linear',
cost   = c(0.001, 0.01, 0.1, 1, 5, 10))
print(modeloSVM1)
modeloSVM1 <- modeloSVM1$best.model
rocSMV1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob")[,2])
predict(modeloSVM1, train, type = "prob")[,2]
predict(modeloSVM1, train, type = "prob")
## dados imputados
set.seed(23)
modeloSVM1 <- e1071::tune.svm(diabetes ~.,
data   = train,
kernel = 'linear',
cost   = c(0.001, 0.01, 0.1, 1, 5, 10))
print(modeloSVM1)
modeloSVM1 <- modeloSVM1$best.model
rocSMV1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob"))
modeloSVM1 <- e1071::tune.svm(diabetes ~.,
data   = train,
kernel = 'linear',
cost   = c(0.001, 0.01, 0.1, 1, 5, 10))
print(modeloSVM1)
modeloSVM1 <- modeloSVM1$best.model
modeloSVM1
tuneGrid <- expand.grid(kernel = 'linear',
cost   = c(0.001, 0.01, 0.1, 1, 5, 10))
modeloSVM1 <- train(diabetes~.,
train,
method = "svm",
metric = "Accuracy",
tuneGrid = tuneGrid,
trControl = train.control)
modeloSVM1 <- train(diabetes~.,
train,
method = "e1071",
metric = "Accuracy",
tuneGrid = tuneGrid,
trControl = train.control)
tuneGrid <- expand.grid(kernel = 'linear',
cost   = c(0.001, 0.01, 0.1, 1, 5, 10))
modeloSVM1 <- train(diabetes~.,
train,
method = "svmLinearWeights2",
metric = "Accuracy",
tuneGrid = tuneGrid,
trControl = train.control)
## dados imputados
library(kernlab)
modeloSVM1 <- train(
diabetes ~., data = train.data, method = "svmLinear",
trControl = trainControl = train.control,
modeloSVM1 <- train(
diabetes ~., data = train.data, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale")
)
modeloSVM1 <- train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale")
)
print(modeloSVM1)
rocSMV1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob"))
rocSMV1 <- roc(response = train_without_NAs$diabetes, predictor = predict(modeloSVM1, train_without_NAs, type = "prob")[,2])
modeloSVM1 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale")
)
print(modeloSVM1)
modeloSVM1 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale")
)
print(modeloSVM1)
predict(modeloSVM1, train_without_NAs, type = "prob")
predict(modeloSVM1, train_without_NAs)
predict(modeloSVM1, train_without_NAs, type = "prob")
modeloSVM1$pred
modeloSVM1$pred$pred
modeloSVM1
modeloSVM1$method
modeloSVM1$results
rocSMV1 <- roc(response = train_without_NAs$diabetes, predictor = predict(modeloSVM1, train_without_NAs, type = "prob")[,2])
predict(modeloSVM1, train_without_NAs, type = "prob")
predict(modeloSVM1, train_without_NAs, type = "response")
predict(modeloSVM1, train_without_NAs, type = "responsive")
predict(modeloSVM1, train_without_NAs, type = "raw")
predict(modeloSVM1, train_without_NAs, type = "prob")
modeloSVM1 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control
#preProcess = c("center","scale")
)
print(modeloSVM1)
predict(modeloSVM1, train_without_NAs, type = "prob")
predict(modeloSVM1, train_without_NAs, type = "raw")
modeloSVM1 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control,
classProbs = TRUE
#preProcess = c("center","scale")
)
train.control <- caret::trainControl(method = "cv", number = 15, classProbs =  TRUE)) # Cross-validation com k=10
train.control <- caret::trainControl(method = "cv", number = 15, classProbs =  TRUE)
modeloSVM1 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale")
)
print(modeloSVM1)
rocSMV1 <- roc(response = train_without_NAs$diabetes, predictor = predict(modeloSVM1, train_without_NAs, type = "prob")[,2])
plotaroc(rocSVM1)
rocSVM1 <- roc(response = train_without_NAs$diabetes, predictor = predict(modeloSVM1, train_without_NAs, type = "prob")[,2])
plotaroc(rocSVM1)
modeloSVM1 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
print(modeloSVM1)
modeloSVM1 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.1, 2, length = 20))
)
print(modeloSVM1)
modeloSVM1 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
print(modeloSVM1)
modeloSVM1 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.001, 10, length = 10))
)
print(modeloSVM1)
modeloSVM1 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
print(modeloSVM1)
rocSVM1 <- roc(response = train_without_NAs$diabetes, predictor = predict(modeloSVM1, train_without_NAs, type = "prob")[,2])
plotaroc(rocSVM1)
set.seed(23)
modeloSVM1 <- caret::train(
diabetes ~., data = train, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
print(modeloSVM1)
plot(modeloSVM1, "Acurácia vs Valores de Cost")
plot(modeloSVM1, main="Acurácia vs Valores de Cost")
## SVM Kernel Linear com dados imputados
set.seed(23)
modeloSVM1 <- caret::train(
diabetes ~., data = train, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
print(modeloSVM1)
plot(modeloSVM1, main="SVM Kernel Linear - Acurácia vs Valores de Cost (Imputados)")
rocSVM1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob")[,2])
plotaroc(rocSVM1, "Curva ROC SVM Kernel Linear (Imputados)")
## SVM Kernel Linear sem missing
set.seed(23)
modeloSVM2 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
print(modeloSVM2)
plot(modeloSVM2, main="SVM Kernel Linear - Acurácia vs Valores de Cost (Removidos)")
rocSVM2 <- roc(response = train_without_NAs$diabetes, predictor = predict(modeloSVM2, train_without_NAs, type = "prob")[,2])
plotaroc(rocSVM2, "Curva ROC SVM Kernel Linear (Removidos)")
## SVM Kernel Não Linear com dados imputados
set.seed(23)
modeloSVM3 <- caret::train(
diabetes ~., data = train, method = "svmRadial",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
modeloSVM3 <- caret::train(
diabetes ~., data = train, method = "svmRadial",
trControl = train.control,
preProcess = c("center","scale"),
tuneLength = 10
)
print(modeloSVM3)
modeloSVM3 <- caret::train(
diabetes ~., data = train, method = "svmRadial",
trControl = train.control,
preProcess = c("center","scale"),
tuneLength = expand.grid(sigma = seq(0.001, 1, length = 10) , C = seq(0.01, 10, length = 10))
)
modeloSVM3 <- caret::train(
diabetes ~., data = train, method = "svmRadial",
trControl = train.control,
preProcess = c("center","scale"),
tuneLength = expand.grid(sigma = seq(0.01, 1, length = 10) , C = seq(0.01, 10, length = 10))
)
modeloSVM3 <- caret::train(
diabetes ~., data = train, method = "svmRadial",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(sigma = seq(0.01, 1, length = 10) , C = seq(0.01, 10, length = 10))
)
print(modeloSVM3)
plot(modeloSVM3, main="SVM Kernel não Linear - Acurácia vs Valores de Cost (Imputados)")
## SVM Kernel Linear com dados imputados
set.seed(23)
modeloSVM1 <- caret::train(
diabetes ~., data = train, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
print(modeloSVM1)
plot(modeloSVM1, main="SVM Kernel Linear - Acurácia vs Valores de Cost (Imputados)")
rocSVM1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob")[,2])
plotaroc(rocSVM1, "Curva ROC SVM Kernel Linear (Imputados)")
## SVM Kernel Linear sem missing
set.seed(23)
modeloSVM2 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
print(modeloSVM2)
plot(modeloSVM2, main="SVM Kernel Linear - Acurácia vs Valores de Cost (Removidos)")
rocSVM2 <- roc(response = train_without_NAs$diabetes, predictor = predict(modeloSVM2, train_without_NAs, type = "prob")[,2])
plotaroc(rocSVM2, "Curva ROC SVM Kernel Linear (Removidos)")
## SVM Kernel Não Linear com dados imputados
set.seed(23)
modeloSVM3 <- caret::train(
diabetes ~., data = train, method = "svmRadial",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(sigma = seq(0.01, 1, length = 10) , C = seq(1, 10, length = 10))
)
print(modeloSVM3)
plot(modeloSVM3, main="SVM Kernel não Linear - Acurácia vs Valores de Cost (Imputados)")
rocSVM3 <- roc(response = train$diabetes, predictor = predict(modeloSVM3, train, type = "prob")[,2])
plotaroc(rocSVM3, "Curva ROC SVM Kernel não Linear (Imputados)")
## SVM Kernel Não Linear sem missing
set.seed(23)
modeloSVM4 <- caret::train(
diabetes ~., data = train_without_NAs, method = "svmRadial",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(sigma = seq(0.01, 1, length = 10) , C = seq(1, 10, length = 10))
)
print(modeloSVM4)
plot(modeloSVM4, main="SVM Kernel não Linear - Acurácia vs Valores de Cost (Removidos)")
rocSVM4 <- roc(response = train_without_NAs$diabetes, predictor = predict(modeloSVM4, train_without_NAs, type = "prob")[,2])
plotaroc(rocSVM4, "Curva ROC SVM Kernel não Linear (Removidos)")
## SVM Kernel Linear com dados imputados
rocSVM1 <- roc(response = test$diabetes, predictor = predict(modeloSVM1, test, type = "prob")[,2])
plotaroc(rocSVM1, titulo = "Curva ROC SVM Kernel Linear (Imputados)")
predictSMV1 <- predict(modeloSVM1, newdata = test)
confusionMatrix(predictSVM1, test$diabetes)
## SVM Kernel Linear com dados imputados
rocSVM1 <- roc(response = test$diabetes, predictor = predict(modeloSVM1, test, type = "prob")[,2])
plotaroc(rocSVM1, titulo = "Curva ROC SVM Kernel Linear (Imputados)")
predictSVM1 <- predict(modeloSVM1, newdata = test)
confusionMatrix(predictSVM1, test$diabetes)
## SVM Kernel Linear sem missing
rocSVM2 <- roc(response = test_without_NAs$diabetes, predictor = predict(modeloSVM2, test_without_NAs, type = "prob")[,2])
plotaroc(rocSVM2, titulo = "Curva ROC SVM Kernel Linear (Removidos)")
predictSVM2 <- predict(modeloSVM2, newdata = test_without_NAs)
confusionMatrix(predictSVM2, test_without_NAs$diabetes)
## SVM Kernel não Linear com dados imputados
rocSVM3 <- roc(response = test$diabetes, predictor = predict(modeloSVM3, test, type = "prob")[,2])
plotaroc(rocSVM3, titulo = "Curva ROC SVM Kernel não Linear (Imputados)")
predictSMV3 <- predict(modeloSVM3, newdata = test)
confusionMatrix(predictSVM3, test$diabetes)
## SVM Kernel Linear com dados imputados
rocSVM1 <- roc(response = test$diabetes, predictor = predict(modeloSVM1, test, type = "prob")[,2])
plotaroc(rocSVM1, titulo = "Curva ROC SVM Kernel Linear (Imputados)")
predictSVM1 <- predict(modeloSVM1, newdata = test)
confusionMatrix(predictSVM1, test$diabetes)
## SVM Kernel Linear sem missing
rocSVM2 <- roc(response = test_without_NAs$diabetes, predictor = predict(modeloSVM2, test_without_NAs, type = "prob")[,2])
plotaroc(rocSVM2, titulo = "Curva ROC SVM Kernel Linear (Removidos)")
predictSVM2 <- predict(modeloSVM2, newdata = test_without_NAs)
confusionMatrix(predictSVM2, test_without_NAs$diabetes)
## SVM Kernel não Linear com dados imputados
rocSVM3 <- roc(response = test$diabetes, predictor = predict(modeloSVM3, test, type = "prob")[,2])
plotaroc(rocSVM3, titulo = "Curva ROC SVM Kernel não Linear (Imputados)")
predictSVM3 <- predict(modeloSVM3, newdata = test)
confusionMatrix(predictSVM3, test$diabetes)
## SVM Kernel Linear sem missing
rocSVM4 <- roc(response = test_without_NAs$diabetes, predictor = predict(modeloSVM4, test_without_NAs, type = "prob")[,2])
plotaroc(rocSVM4, titulo = "Curva ROC SVM Kernel Linear (Removidos)")
predictSVM4 <- predict(modeloSVM4, newdata = test_without_NAs)
confusionMatrix(predictSVM4, test_without_NAs$diabetes)
# options(tinytex.verbose = TRUE)
# template com paramentros padrao para as figuras
knitr::opts_template$set(figuras = list(echo = FALSE,
results='hide',
fig.show = "hold",
fig.align = 'center',
fig.ncol = 1,
# fig.width = 4,
# fig.height = 4,
out.width = "\\textwidth",
out.height = "0.9\\textheight"
))
knitr::opts_template$set(figuras2 = list(echo = FALSE,
results='hide',
fig.show = "hold",
fig.align = 'center',
fig.ncol = 2,
fig.width = 4,
out.width = "0.48\\textwidth",
out.height = "0.30\\textheight"))
knitr::opts_template$set(
series = list(echo = FALSE,
results='hide',
fig.show = "hold",
warning=FALSE,
fig.align = 'center',
fig.ncol = 1,
fig.heigth=3,
fig.width=16
# out.width = "\\textheight"
))
# uso: <<r, opts.label='figuras'>>=
# uso: ```{r, opts.label='figuras'}
set.seed(23)
modeloSVM1 <- caret::train(
diabetes ~., data = train, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
print(modeloSVM1)
plot(modeloSVM1, main="SVM Kernel Linear - Acurácia vs Valores de Cost (Imputados)")
rocSVM1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob")[,2])
plotaroc(rocSVM1, "Curva ROC SVM Kernel Linear (Imputados)")
modeloSVM1 <- caret::train(
diabetes ~., data = train, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
print(modeloSVM1)
plot(modeloSVM1, main="SVM Kernel Linear - Acurácia vs Valores de Cost (Imputados)")
rocSVM1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train)[,2])
rocSVM1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob")[,2])
plotaroc(rocSVM1, "Curva ROC SVM Kernel Linear (Imputados)")
library(caret)
## SVM Kernel Linear com dados imputados
set.seed(23)
modeloSVM1 <- caret::train(
diabetes ~., data = train, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
print(modeloSVM1)
plot(modeloSVM1, main="SVM Kernel Linear - Acurácia vs Valores de Cost (Imputados)")
rocSVM1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob")[,2])
plotaroc(rocSVM1, "Curva ROC SVM Kernel Linear (Imputados)")
plot(modeloSVM1, main="SVM Kernel Linear - Acurácia vs Valores de Cost (Imputados)")
rocSVM1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob")[,2])
plotaroc(rocSVM1, "Curva ROC SVM Kernel Linear (Imputados)")
rocSVM1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob")[,2])
plotaroc(rocSVM1, "Curva ROC SVM Kernel Linear (Imputados)")
print(modeloSVM1$bestTune)
rocSVM1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1$bestTune, train, type = "prob")[,2])
rocSVM1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob")[,2])
plotaroc(rocSVM1, "Curva ROC SVM Kernel Linear (Imputados)")
library(caret)
## SVM Kernel Linear com dados imputados
set.seed(23)
modeloSVM1 <- caret::train(
diabetes ~., data = train, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
print(modeloSVM1)
plot(modeloSVM1, main="SVM Kernel Linear - Acurácia vs Valores de Cost (Imputados)")
rocSVM1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob")[,2])
plotaroc(rocSVM1, "Curva ROC SVM Kernel Linear (Imputados)")
library(caret)
## SVM Kernel Linear com dados imputados
set.seed(23)
modeloSVM1 <- caret::train(
diabetes ~., data = train, method = "svmLinear",
trControl = train.control,
preProcess = c("center","scale"),
tuneGrid = expand.grid(C = seq(0.01, 10, length = 10))
)
print(modeloSVM1)
plot(modeloSVM1, main="SVM Kernel Linear - Acurácia vs Valores de Cost (Imputados)")
rocSVM1 <- roc(response = train$diabetes, predictor = predict(modeloSVM1, train, type = "prob")[,2])
plotaroc(rocSVM1, titulo = "Curva ROC SVM Kernel Linear (Imputados)")
predict(modeloRL1, train, type = "prob")[,2]
predict(modeloRF1, train_without_NAs, type = "prob")[,2]
predict(modeloSVM1, train, type = "prob")[,2]
